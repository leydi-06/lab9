#include <stdio.h>
#include <stdlib.h>
#define HASH_Sz 10

// RecordType
struct RecordType {
    int id;
    char name;
    int order;
};

// HashType
struct HashType {
    struct RecordType data;
    struct HashType* next;
};

// Compute the hash function
int hash(int x)
{

    return x % HASH_Sz;
}

// Parses input file to an integer array
int parseData(char* inputFileName, struct RecordType** ppData) {
    FILE* inFile = fopen(inputFileName, "r");
    int dataSz = 0;
    int i, n;
    char c;
    struct RecordType *pRecord;
    *ppData = NULL;

    if (inFile) {
        fscanf(inFile, "%d\n", &dataSz);
        ppData = (struct RecordType) malloc(sizeof(struct RecordType) * dataSz);
        if (*ppData == NULL) {
            printf("Cannot allocate memory\n");
            exit(-1);
        }
        for (i = 0; i < dataSz; ++i) {
            pRecord = *ppData + i;
            fscanf(inFile, "%d ", &n);
            pRecord->id = n;
            fscanf(inFile, " %c ", &c); 
            pRecord->name = c;
            fscanf(inFile, "%d ", &n);
            pRecord->order = n;
        }
        fclose(inFile);
    }
    return dataSz;
}

// Prints the records
void printRecords(struct RecordType pData[], int dataSz) {
    int i;
    printf("\nRecords:\n");
    for (i = 0; i < dataSz; ++i) {
        printf("\t%d %c %d\n", pData[i].id, pData[i].name, pData[i].order);
    }
    printf("\n\n");
}

// display records in the hash structure
//skip the indices which are free
//the output will be in the following format:
//index x -> id, name, order -> id, name, order ...
void displayRecordsInHash(struct HashType *pHashArray, int hashSz) {
    int i;
    for (i = 0; i < hashSz; ++i) {
        printf("Index %d -> ", i);
        struct HashType* current = pHashArray[i].next;
        while (current != NULL) {
            printf("%d %c %d -> ", current->data.id, current->data.name, current->data.order);
            current = current->next;
        }
        printf("\n");
    }
}

int main(void) {
    struct RecordType *pRecords;
    int recordSz = 0;
    int hashSize = HASH_Sz; // Size of the hash table

    // your hash implementation
    recordSz = parseData("input_lab_9.txt", &pRecords);
    printRecords(pRecords, recordSz);

    struct HashType hashArray = (struct HashType) malloc(sizeof(struct HashType) * hashSize);
    if (hashArray == NULL) {
        printf("Memory allocation failed\n");
        exit(-1);
    }

    for (int i = 0; i < hashSize; i++) {
        hashArray[i].next = NULL;
    }

    for (int i = 0; i < recordSz; i++) {
        int hashedIndex = hash(pRecords[i].id);
        struct HashType* newNode = (struct HashType*) malloc(sizeof(struct HashType));
        if (newNode == NULL) {
            printf("Memory allocation failed\n");
            exit(-1);
        }
        newNode->data = pRecords[i];
        newNode->next = hashArray[hashedIndex].next;
        hashArray[hashedIndex].next = newNode;
    }

    displayRecordsInHash(hashArray, hashSize);

    // Free allocated memory
    for (int i = 0; i < hashSize; i++) {
        struct HashType* current = hashArray[i].next;
        while (current != NULL) {
            struct HashType* temp = current;
            current = current->next;
            free(temp);
        }
    }
    free(hashArray);
    free(pRecords);

    return 0;
}
